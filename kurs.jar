/*Курсовая по теме расчет оконной конструкции*/
 
/*Данная программа вычисляет стоимость оконной конструкции за счет
 её параметров*/
 
import java.awt.*;/*платформо-независимая оконная библиотека
графического интерфейса*/
/*Пакет  AWT (загружается  java.awt) содержит набор классов,
позволяющих выполнять графические операции и создавать элементы
управления. Этот пакет поддерживается последующими версиями язы-
ка, однако считается весьма ограниченным и недостаточно
эффективным.*/
import java.awt.BorderLayout; /*(5 частей света) используется для
 расположения компонентов на контейнере*/
/*Менеджер BorderLayout позволяет позиционировать элементы и группы
из них в областях фиксированного размера, граничащих со сторонами
фрейма, которые обозначаются параметрами сторонами света:NORTH,
SOUTH,EAST,WEST. Остальное пространство обозначается как CENTER.*/
import java.awt.FlowLayout;/*размещает компоненты подобно тому как
текстовый редактор располагает слова, компоненты располагаются друг
за другом слева направо и сверху вниз, начиная с левого верхнего
угла.*/
/*Класс  FlowLayout – менеджер поточной компоновки. При этом компо-
ненты размещаются от левого верхнего угла окна, слева направо и
сверху вниз, как и обычный текст. Этот менеджер используется по
умолчанию при добавлении компонентов в апплеты.*/
import java.awt.GridLayout;/* все компоненты располагаются в
ячейках таблицы, имеющей заданное количество строк и столбцов,
размеры компонент изменяются таким образом, чтобы они полностью
занимали свои ячейки.*/
/*Менеджер GridLayout разделяет форму на заданное количество
рядов и колонок.*/
import java.awt.event.ActionEvent;/*обработчик событий*/
/*Событие генерируется: при нажатии кнопки; двойном щелчке клави-
шей мыши по элементам списка; при выборе пункта меню;*/
import java.awt.event.ActionListener;/*приёмник событий*/
/*Интерфейс  ActionListener содержит единственный метод
actionPerformed(), который нужно реализовать в блоке обработки в
соответствии с поставленной задачей: извлечь числа из двух
текстовых полей, сложить их и поместить результат в метку.*/
import java.math.BigDecimal;/*позволяет точно представлять
только конечные двоичные дроби*/
/*класс для работы с высокоточной арифметикой который поддержи-
вает числа с фиксированной точкой произвольной длины.*/
import javax.swing.*; /*библиотека для создания графического
интерфейса*/
/*Пакет Swing (загружается javax.swing, имя javax обозначает,
что пакет не является основным, а только расширением  языка)
содержит улучшенные и обновленные классы, по большей части
аналогичные AWT. К именам этих классов добавляется  J (JButton,
JLabel и т.д.). Пакет является частью библиотеки JFC (Java
Foundation Classes), которая содержит большой набор компонентов
JavaBeans, предназначенных для создания пользовательских
интерфейсов.*/
 
public class kurs extends JFrame { /*Класс наследует параметры
JFrame(у JFrame окна имеется заголовок, кнопки закрыть,
свернуть и развернуть)*/
/*Любой класс может наследовать свойства и методы суперкласса,
указанного после ключевого слова extends*/
/*Графические приложения используют класс Window (окно верхнего
уровня), который является основой для организации фрейма,
но сам непосредственно для вывода компонент не используется.
Для этого применяется его подкласс Frame. С помощью объекта типа
Frame создается стандартное окно со строкой заголовка, меню,
размерами.Аналогично классы из пакета  Swing используют для вывода
графических изображений окна JPanel и JFrame.*/
/*public - открытый. Это означает, что класс kurs() виден и
доступен любому классу*/
double costWindow = 0;/*Объявляем целочисленную переменную цены 
оконной конструкции*/ 
/*Литералы с плавающей точкой записываются в виде "1.618" или в 
экспоненциальной форме "0.112E-05" относятся к типу double, 
таким образом, действительные числа относятся к типу double.*/ 
JLabel countLabel;/* Объявляем метку, где находится поле вывода 
итоговой цены */ 
JLabel heightLabel;/*Объявляем метку, где находится поле вывода 
высоты*/ 
JLabel widthLabel;/*Объявляем метку, где находится поле вывода 
ширины*/ 
JLabel mmValue1;/*Объявляем метку, где находится поле вывода 
величины измерения*/ 
JLabel mmValue2;/*Объявляем метку, где находится поле вывода 
величины измерения*/ 
JPanel variableLabel; /* Объявляем метку, где находится поля 
ввода переменных */ 
JButton getCost;/*Объявляем кнопку, вызывающую событие подсчета 
итоговой цены оконной конструкции*/ 
/*JPanel используют для вывода графических изображений окна */ 
/*При использовании компонента JButton определяется событие, 
связанное с нажатием кнопки. */ 
JTextArea windowHeight;/*Объявляем поле для ввода высоты оконной 
конструкции*/ 
JTextArea windowWidth;/*Объявляем поле для ввода ширины оконной 
конструкции*/ 
/*многострочная область ввода JTextArea, позволяет редактировать 
и вводить текст*/ 

double baseConst = 0.005;/*Ценообразующая константа*/ 
double heightValue = 0;/*Обнуляем значение высоты*/ 
double widthValue = 0;/*Обнуляем значение ширины*/ 
public kurs() {/*Внутри классов объявляются функции, называемые 
методами, а public значит, что класс доступен в данном пакета 
и вне пакета*/ 
super("Расчет оконной конструкции");/*Устанавливаем заголовок 
окна*/ 
/*Ключевое слово super используется для вызова конструктора 
суперкласса и для доступа к члену суперкласса.*/ 
/* Подготавливаем компоненты объекта */ 
/*с помощью оператора new создается экземпляр объекта*/ 
countLabel = new JLabel("Цена оконной конструкции: " + 
costWindow + " руб."); /*Устанавливаем текст и значение цены 
оконной конструкции метке*/ 
heightLabel = new JLabel("Ширина: ");/*Устанавливаем текст 
в метке*/ 
widthLabel = new JLabel("Высота: ");/*Устанавливаем текст 
в метке*/ 
mmValue1 = new JLabel(" мм");/*Устанавливаем текст в метке*/ 
mmValue2 = new JLabel(" мм");/*Устанавливаем текст в метке*/ 
/*класс JLabel принимает объект String и использует его 
значение для создания метки. */ 
variableLabel = new JPanel(new GridLayout(2,3));/*Устана- 
вливаем панель 2 на 3*/ 
getCost = new JButton("Составить заказ"); /*Устанавливаем 
текст в кнопке*/ 
windowHeight = new JTextArea(""); /*Устанавливаем значение 
в поле*/ 
windowWidth = new JTextArea("");/*Устанавливаем значение 
в поле*/ 

/* Подготавливаем временные компоненты */
JPanel buttonsPanel = new JPanel(new FlowLayout()); 
/* Расставляем компоненты по местам */ 
/*метод add(), который помещает компонент в контейнер*/ 
add(countLabel, BorderLayout.NORTH); /* Размещение компоненты 
СЕВЕР*/ 
add(variableLabel, BorderLayout.CENTER);/*Размещение 
компонентым ЦЕНТР*/ 
add(buttonsPanel, BorderLayout.SOUTH);/*Размещение компоненты 
ЮГ*/ 
buttonsPanel.add(getCost);/* Устанавливаем кнопку на 
buttonsPanel */ 
/*Размещение кнопки на форме обычно производится внутри метода 
init() вызовом метода add() класса Container. */ 
variableLabel.add(heightLabel);/*Устанавливаем кнопку на 
variableLabel*/ 
variableLabel.add(windowHeight);/*Устанавливаем кнопку на 
variableLabel*/ 
variableLabel.add(mmValue1);/*Устанавливаем кнопку на 
variableLabel*/ 
variableLabel.add(widthLabel);/*Устанавливаем кнопку на 
variableLabel*/ 
variableLabel.add(windowWidth);/*Устанавливаем кнопку на 
variableLabel*/ 
variableLabel.add(mmValue2);/*Устанавливаем кнопку на 
variableLabel*/ 
/*производится помещение текстовой метки JLabel, кнопки 
JButton и окна JPanel на форму в апплете*/ 
initListeners();/*запуск метода подсчета итоговой суммы*/ 
/*метод init отвечает за инициализацию полей и размещение 
компонента на форму*/ 
} 

private void initListeners() { 
getCost.addActionListener(new ActionListener() { 
public void actionPerformed(ActionEvent e) {/*ActionEvent e 
- событие при нажатии кнопки*/ 
/*ActionEvent – генерируется: при нажатии кнопки; двойном щелчке 
клавишей мыши по элементам списка; при выборе пункта меню;*/ 
/*Для регистрации заинтересованности блока прослушивания в 
этом событии вызывается метод addActionListener() объектом
класса JButton. Интерфейс ActionListener содержит единственный 
метод actionPerformed(), который нужно реализовать в блоке 
обработки в соответствии с поставленной задачей*/ 
heightValue = Integer.valueOf(windowHeight.getText());/*Получает
целочисленное значение вводимое в поле*/ 
widthValue = Integer.valueOf(windowWidth.getText());/*Получает 
целочисленное значение вводимое в поле*/ 
/*Метод valueOf(String str) определен для всех классов-оболочек, 
соответствующих примитивным типам, и выполняет действия по 
преобразованию значения, заданного в виде строки, к значению 
соответствующего объектного типа данных*/ 
/*Получить значение текста метки можно методом getText().*/
/*string представляет строковое значение*/ 
/*integer - целое значение*/
costWindow = costWindow + (heightValue * widthValue) * baseConst; 
/* Подсчитываем стоимость */ 
updateCrowCounter(); /* Сообщаем аппликации, что цена изменилась*/ 
} 
}); 
} 
private void updateCrowCounter() { 
/*Все, что объявлено private, доступно только методам внутри 
класса и нигде больше.*/ 
countLabel.setText("Цена оконной конструкции: " + 
new BigDecimal(costWindow).setScale(2, BigDecimal.ROUND_HALF_DOWN) + 
" руб.");/*Обновление поля цены оконной конструкции, округление значения 
до 2 символа после запятой*/ 
costWindow = 0; 
/*Возможность изменения текста метки предоставляет метод
setText(String txt).*/ 
} 
public static void main(String[] args) { 
kurs app = new kurs(); 
app.setVisible(true);/*Окно выводится на экран методом setvisibie(true) 
С точки зрения библиотеки AWT, создать окно значит выделить область 
оперативной памяти, заполненную нужными пикселами, а вывести содержимое 
этой области на экран — уже другая задача, которую и решает метод*/ 
app.pack(); /* Эта команда подбирает оптимальный размер в зависимости 
от содержимого окна */ 
/*Здесь класс kurs используется для того, чтобы определить метод 
main(), который запускается автоматически интерпретатором Java и может 
называться контроллером этого простейшего приложения. Метод main() содер- 
жит аргументы-параметры командной строки String[] args, представляющие 
массив строк, и является открытым (public) членом класса. Это означает, что 
метод main() виден и доступен любому классу. Ключевое слово static объяв- 
ляет методы и переменные класса, используемые при работе с классом в целом, 
а не только с объектом класса. Символы верхнего и нижнего регистров здесь раз- 
личаются, как и в С++. Тело метода main() содержит объявление объекта 
kurs app = new kurs(); 
и вызов его метода 
app.setVisible(true);*/ 
} 
}
